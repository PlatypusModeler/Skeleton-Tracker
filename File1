<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Skeleton Tracker</title>
  <style>
    body, html {
      margin: 0;
      padding: 0;
      background: black;
      overflow: hidden;
    }
    canvas {
      display: block;
      margin: 0 auto;
      background: black;
    }
  </style>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-core"></script>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-converter"></script>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-webgl"></script>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/pose-detection"></script>
</head>
<body>
  <video id="video" autoplay playsinline style="display:none;"></video>
  <canvas id="canvas"></canvas>

  <script>
    const video = document.getElementById('video');
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');

    async function setupCamera() {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { width: 640, height: 480 }
      });
      video.srcObject = stream;
      return new Promise(resolve => {
        video.onloadedmetadata = () => resolve(video);
      });
    }

    async function main() {
      await setupCamera();
      video.play();

      const detector = await poseDetection.createDetector(
        poseDetection.SupportedModels.MoveNet,
        { modelType: poseDetection.movenet.modelType.SINGLEPOSE_LIGHTNING }
      );

      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;

      async function render() {
        const poses = await detector.estimatePoses(video);

        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = "black";
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        if (poses.length > 0 && poses[0].keypoints) {
          const keypoints = poses[0].keypoints;

          // Skeleton connections (pairs of points)
          const edges = [
            [5,7], [7,9], [6,8], [8,10], // arms
            [5,6], [5,11], [6,12],       // shoulders/torso
            [11,12], [11,13], [13,15],   // left leg
            [12,14], [14,16]             // right leg
          ];

          ctx.strokeStyle = "white";
          ctx.lineWidth = 3;

          edges.forEach(([i, j]) => {
            const kp1 = keypoints[i];
            const kp2 = keypoints[j];
            if (kp1.score
